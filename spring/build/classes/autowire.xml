<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="address" class="com.hephec.spring.autowire.Address">
		<property name="city" value="beijing"></property>
		<property name="street" value="chaoyang"></property>
	</bean>
	
	<bean id="car" class="com.hephec.spring.autowire.Car">
		<property name="brand" value="Audi"></property>
		<property name="price" value="100.0"></property>
	</bean>
	<bean id="person" class="com.hephec.spring.autowire.Person" autowire="byName">
		<property name="name" value="Tome"></property>
		<!-- 可以使用autowire属性指定自动装配方式,byName根据bean的名字和当前bean的setter风格的属性名进行自动转配
			如有匹配的，则自动装配，否则不装配
		 	byType:根据bean的类型和当前bean的属性类型进行自动装配
		 	若IOC容器中有一个以上的类型匹配的bean.,则抛异常
		 -->
		 
		 <!--  abstract="true"为抽象bean，该bean不能被实例化 ，只用来被继承配置
		 	若某个bean的class属性没有指定，则该bean必须是一个抽象bean
		 -->
	</bean>
	<!-- bean配置的继承：
		使用bean的parent属性指定继承bean的配置
	 -->
	<bean id="address2" class="com.hephec.spring.autowire.Address" parent="address">
	</bean>
	<!-- 
		bean之间的依赖关系
		要求在配置person时必须有一个关联的car
		依赖于这个car
		depends-on="car"
	 -->	
	 <!-- 配置bean的作用域
	 	默认是单例的bean,创建一个bean对象，每次都返回一个bean对象
	 	scope="singleton"|"prototype"|""
	 	singleton:每次都返回相同的bean
	 	prototype:表示每次都返回不同bean
	 	在struts2和spring整合的时候需要为struts2的action配置prototype属性
	  -->
	 
		<!-- SpEL:
			SpEL使用#{...}作为定界符,所有在大括号中的字符都将被认为是SpEL
			SpEL为bean的属性进行动态赋值提供了遍历
			通过SpEL可以实现：
			-通过bean的id对象bean进行引用
			-调用方法及其应用对象中的属性
			-计算表达式的值
			-正则表达式的匹配
			SpEL:引用Bean，属性和方法
			value="#{prefixGenerator}"
			value="#{prefixGenerator.suffix}"
			
		 -->
</beans>
